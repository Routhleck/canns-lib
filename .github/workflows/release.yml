name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU (for Linux multi-arch)
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.toml') }}

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.21.0
      env:
        CIBW_BUILD: cp311-* cp312-* cp313-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
        CIBW_ARCHS_LINUX: auto aarch64
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_ARCHS_WINDOWS: AMD64
        PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1
        CIBW_ENVIRONMENT_PASS_LINUX: PYO3_USE_ABI3_FORWARD_COMPATIBILITY
        CIBW_ENVIRONMENT_PASS_WINDOWS: PYO3_USE_ABI3_FORWARD_COMPATIBILITY
        CIBW_ENVIRONMENT_PASS_MACOS: PYO3_USE_ABI3_FORWARD_COMPATIBILITY

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}
        path: wheelhouse/*.whl
        if-no-files-found: error

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build sdist
      uses: PyO3/maturin-action@v1
      with:
        command: sdist
        args: --out dist

    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz
        if-no-files-found: error

  test-wheels:
    name: Test wheels on ${{ matrix.os }}
    needs: [build-wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}
        path: wheelhouse

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Test wheel installation
      shell: bash
      run: |
        python -m pip install wheelhouse/*.whl
        python -c "import canns_ripser; print('âœ“ Wheel test passed')"

  publish:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist, test-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: pypi  # protection rules for the pypi environment
    permissions:
      id-token: write  # for trusted OIDC

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - name: List and verify packages
      run: |
        ls -la dist/
        python -m pip install twine
        twine check dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true
